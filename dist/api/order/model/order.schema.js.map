{"version":3,"file":"order.schema.js","sourceRoot":"","sources":["../../../../src/api/order/model/order.schema.ts"],"names":[],"mappings":";;;;;;AAAA,kEAA0C;AAE1C,MAAM,WAAW,GAAG,IAAI,kBAAQ,CAAC,MAAM,CACrC;IACE,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC3C,SAAS,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC3C,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC5C,YAAY,EAAE;QACZ,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;QACzC,KAAK,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;QACvC,MAAM,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;KACzC;IACD,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC7C,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC5C,IAAI,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE;IACtB,gBAAgB,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE;IAChD,gBAAgB,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAClD,MAAM,EAAE;QACN,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC;QACtC,OAAO,EAAE,SAAS;KACnB;IAED,WAAW,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;IAC7C,+BAA+B;IAC/B,gCAAgC;IAChC,SAAS,EAAE,EAAE,IAAI,EAAE,kBAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE;IACnE,UAAU,EAAE,EAAE,IAAI,EAAE,kBAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE;IAClE,cAAc,EAAE;QACd,EAAE,IAAI,EAAE,kBAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,eAAe,EAAE;KAC/D;IACD,uEAAuE;CACxE,EACD;IACE,UAAU,EAAE;QACV,SAAS,EAAE,WAAW;QACtB,SAAS,EAAE,WAAW;KACvB;CACF,CACF,CAAC;AAEW,QAAA,aAAa,GAAG,kBAAQ,CAAC,KAAK,CAAS,OAAO,EAAE,WAAW,CAAC,CAAC","sourcesContent":["import mongoose from \"@/vendors/mongoose\";\n\nconst orderSchema = new mongoose.Schema(\n  {\n    user_name: { type: String, required: true },\n    user_tell: { type: String, required: true },\n    user_birth: { type: String, required: true },\n    user_address: {\n      zipcode: { type: String, required: true },\n      basic: { type: String, required: true },\n      detail: { type: String, required: true },\n    },\n    user_gender: { type: String, required: true },\n    user_email: { type: String, required: true },\n    memo: { type: String },\n    reservation_date: { type: Date, required: true },\n    reservation_time: { type: String, required: true },\n    status: {\n      type: String,\n      enum: [\"pending\", \"success\", \"cancel\"],\n      default: \"pending\",\n    },\n\n    total_price: { type: Number, required: true },\n    // productId: { type: String },\n    // hospitalId: { type: String },\n    productId: { type: mongoose.Schema.Types.ObjectId, ref: \"Product\" },\n    hospitalId: { type: mongoose.Schema.Types.ObjectId, ref: \"Admin\" },\n    select_product: [\n      { type: mongoose.Schema.Types.ObjectId, ref: \"SelectProduct\" },\n    ],\n    // hospital: { type: mongoose.Schema.Types.ObjectId, ref: \"Hospital\" },\n  },\n  {\n    timestamps: {\n      createdAt: \"createdAt\",\n      updatedAt: \"updatedAt\",\n    },\n  }\n);\n\nexport const MongooseOrder = mongoose.model<IOrder>(\"Order\", orderSchema);\n"]}