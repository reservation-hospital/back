{"version":3,"file":"order.service.js","sourceRoot":"","sources":["../../../../src/api/order/service/order.service.ts"],"names":[],"mappings":"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","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { OrderRepository } from \"@/api/order/repository/order.repository\";\nimport { AdminRepository } from \"@/api/admin/repository/admin.repository\";\nimport { ProductRepository } from \"@/api/product/repository/product.repository\";\nimport { SelectProductRepository } from \"@/api/selectProduct/repository/selectProduct.repository\";\nimport { OrderService } from \"@/api/order/service/order.service.type\";\nimport { ObjectId } from \"mongodb\";\n// import { OrderResponseDTO } from \"@/api/order/dto/orderResponse.dto\";\n// import { GetOrderResponseDTO } from \"@/api/order/dto/getOrderResponse.dto\";\n// import { GetOrdersResponseDTO } from \"@/api/order/dto/getOrdersResponse.dto\";\n\nexport class OrderServiceImpl implements OrderService {\n  constructor(\n    private readonly _orderRepository: OrderRepository,\n    private readonly _adminRepository: AdminRepository,\n    private readonly _productRepository: ProductRepository,\n    private readonly _selectProductRepository: SelectProductRepository\n  ) {}\n\n  async createOrder(order: Omit<IOrder, \"id\" | \"hospitalId\">): Promise<IOrder> {\n    const product = await this._productRepository.findById(order.productId);\n\n    if (!product) {\n      throw new HttpException(404, \"상품을 찾을 수 없습니다.\");\n    }\n\n    const selectedProducts = order.select_product\n      ? await Promise.all(\n          order.select_product.map(async (productId) => {\n            const selectedProduct =\n              await this._selectProductRepository.findById(productId);\n            if (!selectedProduct) {\n              throw new HttpException(\n                404,\n                `선택 상품 ID ${productId}를 찾을 수 없습니다.`\n              );\n            }\n            return selectedProduct;\n          })\n        )\n      : [];\n\n    const totalPrice =\n      product.price + selectedProducts.reduce((sum, p) => sum + p.price, 0);\n\n    const newOrder: IOrder = {\n      id: \"\",\n      user_name: order.user_name,\n      user_tell: order.user_tell,\n      user_birth: order.user_birth,\n      user_address: order.user_address,\n      user_gender: order.user_gender,\n      user_email: order.user_email,\n      memo: order.memo,\n      reservation_date: order.reservation_date,\n      reservation_time: order.reservation_time,\n      status: \"pending\",\n      total_price: totalPrice,\n      productId: order.productId,\n      hospitalId: product.hospitalId,\n      select_product: order.select_product,\n      // hospitalId: id,\n      // hospital: order.hospital,\n    };\n\n    const savedOrder = await this._orderRepository.save(newOrder);\n\n    const findAdmin = await this._adminRepository.findById(product.hospitalId);\n\n    if (!findAdmin) {\n      throw new HttpException(409, \"존재하지 않는 병원입니다.\");\n    }\n\n    const updatedOrder = findAdmin.orders\n      ? findAdmin.orders.concat(savedOrder)\n      : [savedOrder];\n\n    await this._adminRepository.update(product.hospitalId, {\n      orders: updatedOrder,\n    });\n\n    return savedOrder;\n  }\n\n  async getOrders(): Promise<IOrder[]> {\n    const orders = await this._orderRepository.findAll();\n    return orders;\n  }\n\n  // async getOrder(orderId: string): Promise<IOrder | null> {\n  //   const order = await this._orderRepository.findById(orderId);\n\n  //   if (!order) {\n  //     throw new HttpException(404, \"예약 정보 조회 실패\");\n  //   }\n\n  //   return order;\n  // }\n  async getOrder(user_tell: string, email: string): Promise<IOrder[]> {\n    if (user_tell) {\n      const orders = await this._orderRepository.findByTell(user_tell);\n      if (orders.length === 0) {\n        throw new HttpException(\n          404,\n          \"해당 휴대폰 번호로 조회된 예약 내역이 없습니다.\"\n        );\n      }\n      return orders;\n    } else if (email) {\n      const orders = await this._orderRepository.findByEmail(email);\n      if (orders.length === 0) {\n        throw new HttpException(\n          404,\n          \"해당 이메일로 조회된 예약 내역이 없습니다.\"\n        );\n      }\n      return orders;\n    } else {\n      throw new HttpException(404, \"주문 정보 조회 실패\");\n    }\n  }\n\n  async updateOrder(\n    orderId: string,\n    // params: Partial<Omit<IOrder, \"id\">>\n    params: Omit<IOrder, \"id\">\n  ): Promise<void> {\n    const findOrder = await this._orderRepository.findById(orderId);\n\n    if (!findOrder) {\n      throw new HttpException(404, \"예약 정보 조회 실패\");\n    }\n\n    await this._orderRepository.update(orderId, params);\n\n    return;\n  }\n\n  async deleteOrder(orderId: string): Promise<void> {\n    const findOrder = await this._orderRepository.findById(orderId);\n\n    if (!findOrder) {\n      throw new HttpException(404, \"예약을 찾을 수 없습니다.\");\n    }\n\n    const findAdmin = await this._adminRepository.findById(\n      findOrder.hospitalId\n    );\n\n    if (!findAdmin) {\n      throw new HttpException(409, \"존재하지 않는 병원입니다.\");\n    }\n\n    const updatedOrders = (findAdmin.orders || []).filter((p) => {\n      return (\n        new ObjectId(p.id).toString() !== new ObjectId(findOrder.id).toString()\n      );\n    });\n\n    await this._adminRepository.update(findAdmin.id, { orders: updatedOrders });\n\n    await this._orderRepository.delete(orderId);\n  }\n}\n"]}