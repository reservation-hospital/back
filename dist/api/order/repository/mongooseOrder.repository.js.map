{"version":3,"file":"mongooseOrder.repository.js","sourceRoot":"","sources":["../../../../src/api/order/repository/mongooseOrder.repository.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AAEnE,iEAA+D;AAE/D,MAAa,uBAAuB;IAClC,KAAK,CAAC,IAAI,CAAC,KAAyB;QAClC,MAAM,QAAQ,GAAG,IAAI,4BAAa,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACtB,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,MAAM,GAAG,MAAM,4BAAa,CAAC,IAAI,EAAE;aACtC,QAAQ,CAAC;YACR,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,YAAY;SACrB,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,YAAY;YAClB,MAAM,EAAE,cAAc;SACvB,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,gBAAgB;YACtB,MAAM,EAAE,YAAY;SACrB,CAAC;aACD,IAAI,EAAE,CAAC;QACV,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,OAAe;QAC5B,MAAM,KAAK,GAAG,4BAAa,CAAC,QAAQ,CAAC,OAAO,CAAC;aAC1C,QAAQ,CAAC;YACR,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,YAAY;SACrB,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,YAAY;YAClB,MAAM,EAAE,cAAc;SACvB,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,gBAAgB;YACtB,MAAM,EAAE,YAAY;SACrB,CAAC;aACD,IAAI,EAAE,CAAC;QACV,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,SAAiB;QAChC,MAAM,KAAK,GAAG,4BAAa,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,QAAQ,CAAC;YACvD,IAAI,EAAE,YAAY;YAClB,MAAM,EAAE,iBAAiB;SAC1B,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,UAAkB;QAClC,MAAM,KAAK,GAAG,4BAAa,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC;QACjD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,MAAM,CACV,OAAe,EACf,eAAmC;QAEnC,MAAM,WAAW,GAAG,MAAM,4BAAa,CAAC,iBAAiB,CACvD,OAAO,EACP,eAAe,CAChB,CAAC;QAEF,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACjD,CAAC;QAED,OAAO;IACT,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,OAAe;QAC1B,MAAM,4BAAa,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC;QAChD,OAAO;IACT,CAAC;CACF;AA5ED,0DA4EC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { OrderRepository } from \"@/api/order/repository/order.repository\";\nimport { MongooseOrder } from \"@/api/order/model/order.schema\";\n\nexport class MongooseOrderRepository implements OrderRepository {\n  async save(order: Omit<IOrder, \"id\">): Promise<IOrder> {\n    const newOrder = new MongooseOrder(order);\n    await newOrder.save();\n    return newOrder;\n  }\n\n  async findAll(): Promise<IOrder[]> {\n    const values = await MongooseOrder.find()\n      .populate({\n        path: \"productId\",\n        select: \"name price\",\n      })\n      .populate({\n        path: \"hospitalId\",\n        select: \"hospitalName\",\n      })\n      .populate({\n        path: \"select_product\",\n        select: \"name price\",\n      })\n      .exec();\n    return values;\n  }\n\n  async findById(orderId: string): Promise<IOrder | null> {\n    const order = MongooseOrder.findById(orderId)\n      .populate({\n        path: \"productId\",\n        select: \"name price\",\n      })\n      .populate({\n        path: \"hospitalId\",\n        select: \"hospitalName\",\n      })\n      .populate({\n        path: \"select_product\",\n        select: \"name price\",\n      })\n      .exec();\n    return order;\n  }\n\n  async findByTell(user_tell: string): Promise<IOrder[]> {\n    const order = MongooseOrder.find({ user_tell }).populate({\n      path: \"hospitalId\",\n      select: \"id hospitalName\",\n    });\n    return order;\n  }\n\n  async findByEmail(user_email: string): Promise<IOrder[]> {\n    const order = MongooseOrder.find({ user_email });\n    return order;\n  }\n\n  async update(\n    orderId: string,\n    updateOrderInfo: Omit<IOrder, \"id\">\n  ): Promise<void> {\n    const updateOrder = await MongooseOrder.findByIdAndUpdate(\n      orderId,\n      updateOrderInfo\n    );\n\n    if (!updateOrder) {\n      throw new HttpException(404, \"주문을 찾을 수 없습니다.\");\n    }\n\n    return;\n  }\n\n  async delete(orderId: string): Promise<void> {\n    await MongooseOrder.deleteOne({ _id: orderId });\n    return;\n  }\n}\n"]}