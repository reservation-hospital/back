{"version":3,"file":"selectProduct.service.js","sourceRoot":"","sources":["../../../../src/api/selectProduct/service/selectProduct.service.ts"],"names":[],"mappings":"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","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport mongoose from \"mongoose\";\nimport { SelectProductRepository } from \"@/api/selectProduct/repository/selectProduct.repository\";\nimport { AdminRepository } from \"@/api/admin/repository/admin.repository\";\nimport { SelectProductService } from \"@/api/selectProduct/service/selectProduct.service.type\";\nimport { ObjectId } from \"mongodb\";\n// import { SelectProductResponseDTO } from '@/api/selectProduct/dto/selectProductResponse.dto';\n// import { GetSelectProductResponseDTO } from '@/api/selectProduct/dto/getSelectProductResponse.dto';\n// import { GetSelectProductsResponseDTO } from '@/api/selectProduct/dto/getSelectProductsResponse.dto';\n\nexport class SelectProductServiceImpl implements SelectProductService {\n  constructor(\n    private readonly _selectProductRepository: SelectProductRepository,\n    private readonly _adminRepository: AdminRepository\n  ) {}\n\n  async createSelectProduct(\n    product: Omit<ISelectProduct, \"id\">\n  ): Promise<ISelectProduct> {\n    const newProduct: ISelectProduct = {\n      name: product.name,\n      price: product.price,\n      description: product.description,\n    };\n\n    const savedProduct = await this._selectProductRepository.save(newProduct);\n\n    const allAdmins = await this._adminRepository.findAll();\n\n    await Promise.all(\n      allAdmins.map(async (admin) => {\n        const updatedSelectProducts = admin.selectProducts\n          ? admin.selectProducts.concat(savedProduct)\n          : [savedProduct];\n\n        await this._adminRepository.update(admin?.id, {\n          selectProducts: updatedSelectProducts,\n        });\n      })\n    );\n\n    return savedProduct;\n  }\n\n  async getSelectProducts(): Promise<ISelectProduct[]> {\n    const selectProducts = await this._selectProductRepository.findAll();\n\n    return selectProducts;\n  }\n\n  async getSelectProduct(\n    selectProductId: string\n  ): Promise<ISelectProduct | null> {\n    const selectProduct = await this._selectProductRepository.findById(\n      selectProductId\n    );\n\n    if (!selectProduct) {\n      throw new HttpException(404, \"선택 상품 정보 조회 실패\");\n    }\n\n    // const selectProductList = await new GetSelectProductResponseDTO(selectProduct);\n\n    return selectProduct;\n  }\n\n  async updateSelectProduct(\n    selectProductId: string,\n    params: Partial<Omit<ISelectProduct, \"_id\">>\n  ): Promise<void> {\n    const findSelectProduct = await this._selectProductRepository.findById(\n      selectProductId\n    );\n\n    if (!findSelectProduct) {\n      throw new HttpException(404, \"선택 상품 정보 조회 실패\");\n    }\n\n    await this._selectProductRepository.update(selectProductId, params);\n\n    return;\n  }\n\n  async deleteSelectProduct(selectProductId: string): Promise<void> {\n    // 1. 선택 상품 삭제\n    await this._selectProductRepository.delete(selectProductId);\n\n    // 2. 모든 관리자 가져오기\n    const allAdmins = await this._adminRepository.findAll();\n\n    // 3. 모든 관리자에서 선택 상품 목록 업데이트\n    await Promise.all(\n      allAdmins.map(async (admin) => {\n        const updatedSelectProducts = (admin.selectProducts || []).filter(\n          (p) => {\n            return (\n              new ObjectId(p.id).toString() !==\n              new ObjectId(selectProductId).toString()\n            );\n          }\n        );\n\n        // 관리자의 선택 상품 목록 업데이트\n        await this._adminRepository.update(admin.id, {\n          selectProducts: updatedSelectProducts,\n        });\n      })\n    );\n  }\n}\n"]}