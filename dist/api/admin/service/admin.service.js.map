{"version":3,"file":"admin.service.js","sourceRoot":"","sources":["../../../../src/api/admin/service/admin.service.ts"],"names":[],"mappings":";;;;;;AAAA,4FAAmE;AAGnE,wDAA8B;AAG9B,MAAa,gBAAgB;IACE;IAA7B,YAA6B,gBAAiC;QAAjC,qBAAgB,GAAhB,gBAAgB,CAAiB;IAAG,CAAC;IAElE,mCAAmC;IACnC,KAAK,CAAC,MAAM,CAAC,MAAmC;QAC9C,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAExE,IAAI,SAAS,EAAE,CAAC;gBACd,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;YAClD,CAAC;YAED,MAAM,IAAI,GAAG,MAAM,kBAAM,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACtC,MAAM,cAAc,GAAG,MAAM,kBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YAEhE,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;gBAChD,GAAG,MAAM;gBACT,QAAQ,EAAE,cAAc;gBACxB,IAAI,EAAE,UAAU;aACjB,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAEtB,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED,8BAA8B;IAC9B,KAAK,CAAC,SAAS;QACb,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;QACrD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,2BAA2B;IAC3B,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;QACrD,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,2BAA2B;IAC3B,KAAK,CAAC,WAAW,CACf,EAAU,EACV,MAA6C;QAE7C,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC3D,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACvB,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;QACrD,CAAC;QAED,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,EAAE;YAC1D,GAAG,MAAM;SACV,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,2BAA2B;IAC3B,KAAK,CAAC,WAAW,CAAC,EAAU;QAC1B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;QACrD,CAAC;QACD,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACvC,OAAO;IACT,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,EAAU;QAC3B,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACvD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;QACrD,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AA9ED,4CA8EC","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { AdminService } from \"@/api/admin/service/admin.service.type\";\nimport { AdminRepository } from \"@/api/admin/repository/admin.repository\";\nimport bcrypt from \"bcryptjs\";\nimport mongoose from \"mongoose\";\n\nexport class AdminServiceImpl implements AdminService {\n  constructor(private readonly _adminRepository: AdminRepository) {}\n\n  /** 회원가입(role = admin, hospital) */\n  async signUp(params: Omit<IAdmin, \"id\" | \"role\">): Promise<IAdmin> {\n    try {\n      const findAdmin = await this._adminRepository.findByEmail(params.email);\n\n      if (findAdmin) {\n        throw new HttpException(409, \"이미 존재하는 이메일입니다.\");\n      }\n\n      const salt = await bcrypt.genSalt(10);\n      const saltedPassword = await bcrypt.hash(params.password, salt);\n\n      const newAdmin = await this._adminRepository.save({\n        ...params,\n        password: saltedPassword,\n        role: \"hospital\",\n      });\n      console.log(newAdmin);\n\n      return newAdmin;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /** 관리자 전체 조회(role = admin) */\n  async getAdmins(): Promise<IAdmin[]> {\n    const admins = await this._adminRepository.findAll();\n    return admins;\n  }\n\n  /** 관리자 조회(role = admin) */\n  async getAdmin(id: string): Promise<IAdmin> {\n    const admin = await this._adminRepository.findById(id);\n    if (!admin) {\n      throw new HttpException(404, \"해당 관리자는 존재하지 않습니다.\");\n    }\n    return admin;\n  }\n\n  /** 관리자 수정(role = admin) */\n  async updateAdmin(\n    id: string,\n    params: Partial<Omit<IAdmin, \"id\" | \"order\">>\n  ): Promise<void> {\n    const findAdmin = await this._adminRepository.findById(id);\n    console.log(findAdmin);\n    if (!findAdmin) {\n      throw new HttpException(404, \"해당 관리자는 존재하지 않습니다.\");\n    }\n\n    const updatedAdmin = await this._adminRepository.update(id, {\n      ...params,\n    });\n\n    return updatedAdmin;\n  }\n\n  /** 관리자 삭제(role = admin) */\n  async deleteAdmin(id: string): Promise<void> {\n    const admin = await this._adminRepository.findById(id);\n    if (!admin) {\n      throw new HttpException(404, \"해당 관리자는 존재하지 않습니다.\");\n    }\n    await this._adminRepository.delete(id);\n    return;\n  }\n\n  async userGetAdmin(id: string): Promise<IAdmin> {\n    const admin = await this._adminRepository.findById(id);\n    if (!admin) {\n      throw new HttpException(404, \"해당 관리자는 존재하지 않습니다.\");\n    }\n    return admin;\n  }\n}\n"]}