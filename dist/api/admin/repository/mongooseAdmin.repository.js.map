{"version":3,"file":"mongooseAdmin.repository.js","sourceRoot":"","sources":["../../../../src/api/admin/repository/mongooseAdmin.repository.ts"],"names":[],"mappings":";;;;;;AACA,iEAA+D;AAC/D,4FAAmE;AAEnE,MAAa,uBAAuB;IAClC,mCAAmC;IACnC,KAAK,CAAC,IAAI,CAAC,KAAyB;QAClC,MAAM,QAAQ,GAAG,IAAI,4BAAa,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACtB,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,8BAA8B;IAC9B,KAAK,CAAC,OAAO;QACX,MAAM,MAAM,GAAG,MAAM,4BAAa,CAAC,IAAI,EAAE;aACtC,QAAQ,CAAC;YACR,IAAI,EAAE,UAAU;YAChB,MAAM,EAAE,mCAAmC;SAC5C,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,QAAQ;YACd,MAAM,EAAE,8DAA8D;SACvE,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,gBAAgB;YACtB,MAAM,EAAE,wBAAwB;SACjC,CAAC;aACD,IAAI,EAAE,CAAC;QACV,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,2BAA2B;IAC3B,KAAK,CAAC,QAAQ,CAAC,EAAU;QACvB,MAAM,KAAK,GAAG,MAAM,4BAAa,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC/C,cAAc;QACd,sBAAsB;QACtB,iDAAiD;QACjD,KAAK;QACL,cAAc;QACd,oBAAoB;QACpB,4EAA4E;QAC5E,KAAK;QACL,cAAc;QACd,4BAA4B;QAC5B,sCAAsC;QACtC,KAAK;QACL,WAAW;QACX,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;QACrD,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,2BAA2B;IAC3B,KAAK,CAAC,MAAM,CAAC,EAAU,EAAE,eAAuB;QAC9C,+DAA+D;QAC/D,eAAe;QACf,MAAM;QAEN,MAAM,4BAAa,CAAC,iBAAiB,CAAC,EAAE,EAAE,eAAe,CAAC,CAAC,IAAI,EAAE,CAAC;QAElE,OAAO;IACT,CAAC;IAED,2BAA2B;IAC3B,KAAK,CAAC,MAAM,CAAC,EAAU;QACrB,MAAM,4BAAa,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC;QAC3C,OAAO;IACT,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,KAAa;QAC7B,MAAM,SAAS,GAAG,MAAM,4BAAa,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QACzD,OAAO,SAAS,IAAI,IAAI,CAAC;IAC3B,CAAC;CACF;AAvED,0DAuEC","sourcesContent":["import { AdminRepository } from \"@/api/admin/repository/admin.repository\";\nimport { MongooseAdmin } from \"@/api/admin/model/admin.schema\";\nimport HttpException from \"@/api/common/exceptions/http.exception\";\n\nexport class MongooseAdminRepository implements AdminRepository {\n  /** 회원가입(role = admin, hospital) */\n  async save(admin: Omit<IAdmin, \"id\">): Promise<IAdmin> {\n    const newAdmin = new MongooseAdmin(admin);\n    await newAdmin.save();\n    return newAdmin;\n  }\n\n  /** 관리자 전체 조회(role = admin) */\n  async findAll(): Promise<IAdmin[]> {\n    const admins = await MongooseAdmin.find()\n      .populate({\n        path: \"products\",\n        select: \"name price description hospitalId\",\n      })\n      .populate({\n        path: \"orders\",\n        select: \"user_name user_tell memo productId hospitalId select_product\",\n      })\n      .populate({\n        path: \"selectProducts\",\n        select: \"name price description\",\n      })\n      .exec();\n    return admins;\n  }\n\n  /** 관리자 조회(role = admin) */\n  async findById(id: string): Promise<IAdmin | null> {\n    const admin = await MongooseAdmin.findById(id);\n    // .populate({\n    //   path: \"products\",\n    //   select: \"name price description hospitalId\",\n    // })\n    // .populate({\n    //   path: \"orders\",\n    //   select: \"user_name user_tell memo productId hospitalId select_product\",\n    // })\n    // .populate({\n    //   path: \"selectProducts\",\n    //   select: \"name price description\",\n    // })\n    // .exec();\n    console.log(admin);\n    if (!admin) {\n      throw new HttpException(404, \"해당 관리자를 찾을 수 없습니다.\");\n    }\n    return admin;\n  }\n\n  /** 관리자 수정(role = admin) */\n  async update(id: string, updateAdminInfo: IAdmin): Promise<void> {\n    // await MongooseAdmin.findByIdAndUpdate(id, updateAdminInfo, {\n    //   new: true,\n    // });\n\n    await MongooseAdmin.findByIdAndUpdate(id, updateAdminInfo).exec();\n\n    return;\n  }\n\n  /** 관리자 삭제(role = admin) */\n  async delete(id: string): Promise<void> {\n    await MongooseAdmin.deleteOne({ _id: id });\n    return;\n  }\n\n  async findByEmail(email: string): Promise<IAdmin | null> {\n    const findAdmin = await MongooseAdmin.findOne({ email });\n    return findAdmin ?? null;\n  }\n}\n"]}