{"version":3,"file":"admin.controller.js","sourceRoot":"","sources":["../../../../src/api/admin/controller/admin.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport { AdminService } from \"@/api/admin/service/admin.service.type\";\nimport bcrypt from \"bcryptjs\";\n\nexport default class AdminController {\n  // 다른 곳에서 만든 서비스 컨트롤러에서 주입\n  constructor(private _adminService: AdminService) {\n    this.signup = this.signup.bind(this);\n    this.getAdmins = this.getAdmins.bind(this);\n    this.getAdmin = this.getAdmin.bind(this);\n    this.updateAdmin = this.updateAdmin.bind(this);\n    this.deleteAdmin = this.deleteAdmin.bind(this);\n    this.getUserAdmin = this.getUserAdmin.bind(this);\n  }\n\n  /** 회원가입(role = admin, hospital) */\n  async signup(req: Request, res: Response, next: NextFunction) {\n    console.log(req.body);\n    try {\n      const admin = await this._adminService.signUp({\n        email: req.body.email,\n        password: req.body.password,\n        name: req.body.name,\n        hospital: req.body.hospital,\n      });\n\n      res.status(201).json({ message: \"회원가입 성공\", data: admin });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /** 관리자 전체 조회(role = admin) */\n  async getAdmins(req: Request, res: Response, next: NextFunction) {\n    try {\n      const admins = await this._adminService.getAdmins();\n      res.status(200).json({\n        message: \"관리자 목록 조회 성공\",\n        data: admins,\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"관리자 목록 조회 실패\" });\n      next(error);\n    }\n  }\n\n  /** 관리자 조회(role = admin,hospital) */\n  async getAdmin(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { id } = req.admin;\n      const admin = await this._adminService.getAdmin(id);\n\n      res.status(200).json({\n        message: \"관리자 상세 조회 성공\",\n        data: admin,\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n  /** 관리자 조회(role = user) */\n  async getUserAdmin(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { id } = req.params;\n      const admin = await this._adminService.userGetAdmin(id);\n\n      res.status(200).json({\n        message: \"관리자 상세 조회 성공\",\n        data: admin,\n      });\n    } catch (error) {\n      next(error);\n    }\n  }\n\n  /** 관리자 수정(role = admin) */\n  async updateAdmin(req: Request, res: Response, next: NextFunction) {\n    try {\n      // const { id } = req.params;\n      // await this._adminService.updateAdmin(id, req.body);\n\n      const updateData = { ...req.body };\n\n      if (updateData.password) {\n        const saltedPassword = await bcrypt.hash(updateData.password, 10);\n        updateData.password = saltedPassword;\n      }\n\n      const admin = await this._adminService.updateAdmin(\n        req.admin.id,\n        updateData\n      );\n      res.status(200).json({\n        message: \"관리자 수정 성공\",\n        data: admin,\n      });\n    } catch (error) {\n      res.status(400).json({ message: \"관리자 수정 실패\" });\n    }\n  }\n\n  /** 관리자 삭제(role = admin) */\n  async deleteAdmin(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { id } = req.params;\n      await this._adminService.deleteAdmin(id);\n      res.status(200).json({ message: \"관리자 삭제 성공\" });\n    } catch (error) {\n      console.log(error);\n      res.status(500).json({ message: \"관리자 삭제 실패\" });\n      // next(error);\n    }\n  }\n}\n"]}