{"version":3,"file":"mongooseProduct.repository.js","sourceRoot":"","sources":["../../../../src/api/product/repository/mongooseProduct.repository.ts"],"names":[],"mappings":";;;;;;AACA,6DAA2D;AAC3D,iEAA+D;AAC/D,4FAAmE;AAEnE,MAAa,yBAAyB;IACpC,KAAK,CAAC,IAAI,CACR,UAAkB,EAClB,MAA4B;QAE5B,MAAM,KAAK,GAAG,MAAM,4BAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QACvD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACjD,CAAC;QACD,MAAM,UAAU,GAAG,IAAI,gCAAe,CAAC;YACrC,GAAG,MAAM;YACT,UAAU,EAAE,UAAU;SACvB,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACxB,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;QAClC,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,OAAO;QACX,MAAM,QAAQ,GAAG,MAAM,gCAAe,CAAC,IAAI,EAAE;aAC1C,QAAQ,CAAC;YACR,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,YAAY;SACrB,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,YAAY;YAClB,MAAM,EAAE,0BAA0B;SACnC,CAAC;aACD,IAAI,EAAE,CAAC;QACV,IAAI,CAAC,QAAQ;YAAE,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QAC9D,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,SAAiB;QAC9B,MAAM,OAAO,GAAG,gCAAe,CAAC,QAAQ,CAAC,SAAS,CAAC;aAChD,QAAQ,CAAC;YACR,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,YAAY;SACrB,CAAC;aACD,QAAQ,CAAC;YACR,IAAI,EAAE,YAAY;YAClB,MAAM,EAAE,sBAAsB;SAC/B,CAAC;aACD,IAAI,EAAE,CAAC;QACV,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QAC7D,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,SAAiB,EAAE,MAA4B;QAC1D,MAAM,WAAW,GAAG,MAAM,gCAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC9D,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,IAAI,wBAAa,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC;QACjD,CAAC;QACD,MAAM,gCAAe,CAAC,iBAAiB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAC3D,OAAO;IACT,CAAC;IACD,KAAK,CAAC,MAAM,CAAC,SAAiB;QAC5B,MAAM,gCAAe,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC;QACpD,OAAO;IACT,CAAC;CACF;AA5DD,8DA4DC","sourcesContent":["import { ProductRepository } from \"./product.repository\";\nimport { MongooseProduct } from \"../models/product.schema\";\nimport { MongooseAdmin } from \"@/api/admin/model/admin.schema\";\nimport HttpException from \"@/api/common/exceptions/http.exception\";\n\nexport class MongooseProductRepository implements ProductRepository {\n  async save(\n    hospitalId: string,\n    params: Omit<IProduct, \"id\">\n  ): Promise<IProduct> {\n    const admin = await MongooseAdmin.findById(hospitalId);\n    if (!admin) {\n      throw new HttpException(404, \"병원을 찾을 수 없습니다.\");\n    }\n    const newProduct = new MongooseProduct({\n      ...params,\n      hospitalId: hospitalId,\n    });\n    console.log(newProduct);\n    const product = newProduct.save();\n    return product;\n  }\n\n  async findAll(): Promise<IProduct[]> {\n    const products = await MongooseProduct.find()\n      .populate({\n        path: \"selective\",\n        select: \"name price\",\n      })\n      .populate({\n        path: \"hospitalId\",\n        select: \"_id hospitalName address\",\n      })\n      .exec();\n    if (!products) throw new HttpException(404, \"상품을 찾을 수 없습니다.\");\n    return products;\n  }\n\n  async findById(productId: string): Promise<IProduct | null> {\n    const product = MongooseProduct.findById(productId)\n      .populate({\n        path: \"selective\",\n        select: \"name price\",\n      })\n      .populate({\n        path: \"hospitalId\",\n        select: \"hospitalName address\",\n      })\n      .exec();\n    if (!product) throw new HttpException(404, \"상품을 찾을 수 없습니다.\");\n    return product;\n  }\n\n  async update(productId: string, params: Omit<IProduct, \"id\">): Promise<void> {\n    const findProduct = await MongooseProduct.findById(productId);\n    if (!findProduct) {\n      throw new HttpException(404, \"상품을 찾을 수 없습니다.\");\n    }\n    await MongooseProduct.findByIdAndUpdate(productId, params);\n    return;\n  }\n  async delete(productId: string): Promise<void> {\n    await MongooseProduct.deleteOne({ _id: productId });\n    return;\n  }\n}\n"]}