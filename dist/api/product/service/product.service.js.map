{"version":3,"file":"product.service.js","sourceRoot":"","sources":["../../../../src/api/product/service/product.service.ts"],"names":[],"mappings":"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","sourcesContent":["import HttpException from \"@/api/common/exceptions/http.exception\";\nimport { ProductRepository } from \"../repository/product.repository\";\nimport { AdminRepository } from \"@/api/admin/repository/admin.repository\";\nimport { ProductService } from \"./product.service.type\";\nimport { ObjectId } from \"mongodb\";\n\nexport class ProductServiceImpl implements ProductService {\n  private readonly _productRepository: ProductRepository;\n  private readonly _adminRepository: AdminRepository;\n  constructor(\n    productRepository: ProductRepository,\n    adminRepository: AdminRepository\n  ) {\n    this._productRepository = productRepository;\n    this._adminRepository = adminRepository;\n  }\n\n  async createProduct(\n    hospitalId: string,\n    product: Omit<IProduct, \"id\">\n  ): Promise<IProduct> {\n    const findAdmin = await this._adminRepository.findById(hospitalId);\n\n    if (!findAdmin) {\n      throw new HttpException(409, \"존재하지 않는 병원입니다.\");\n    }\n\n    const newProduct: IProduct = {\n      name: product.name,\n      price: product.price,\n      description: product.description,\n      selective: product.selective,\n      hospitalId: hospitalId,\n    };\n    console.log(\"newProduct\", newProduct);\n\n    const savedProduct = await this._productRepository.save(\n      hospitalId,\n      newProduct\n    );\n\n    const updateProducts = findAdmin.products\n      ? findAdmin.products.concat(savedProduct)\n      : [savedProduct];\n\n    await this._adminRepository.update(hospitalId, {\n      products: updateProducts,\n    });\n\n    return newProduct;\n  }\n\n  async getProducts(): Promise<IProduct[]> {\n    const products = await this._productRepository.findAll();\n    return products;\n  }\n\n  async getProductById(productId: string): Promise<IProduct> {\n    const product = await this._productRepository.findById(productId);\n    if (!product) {\n      throw new HttpException(404, \"상품을 찾을 수 없습니다.\");\n    }\n    return product;\n  }\n  async updateProduct(productId: string, product: IProduct): Promise<void> {\n    const productToUpdate: Omit<IProduct, \"id\"> = {\n      ...product,\n      description: product.description || \"\",\n    };\n    await this._productRepository.update(productId, productToUpdate);\n\n    return;\n  }\n\n  async deleteProduct(hospitalId: string, productId: string): Promise<void> {\n    const findAdmin = await this._adminRepository.findById(hospitalId);\n    if (!findAdmin) {\n      throw new HttpException(409, \"존재하지 않는 병원입니다.\");\n    }\n\n    const product = await this._productRepository.findById(productId);\n    if (!product) {\n      throw new HttpException(404, \"상품을 찾을 수 없습니다.\");\n    }\n\n    const updatedProducts = (findAdmin.products || []).filter((p) => {\n      return (\n        new ObjectId(p.id).toString() !== new ObjectId(productId).toString()\n      );\n    });\n\n    await this._adminRepository.update(hospitalId, {\n      products: updatedProducts,\n    });\n\n    await this._productRepository.delete(productId);\n  }\n}\n"]}