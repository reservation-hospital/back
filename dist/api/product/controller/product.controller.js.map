{"version":3,"file":"product.controller.js","sourceRoot":"","sources":["../../../../src/api/product/controller/product.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from \"express\";\nimport { ProductService } from \"../service/product.service.type\";\n\nexport default class ProductController {\n  private readonly _productService: ProductService;\n  constructor(_productService: ProductService) {\n    this._productService = _productService;\n\n    this.createProduct = this.createProduct.bind(this);\n    this.getProducts = this.getProducts.bind(this);\n    this.getProduct = this.getProduct.bind(this);\n    this.updateProduct = this.updateProduct.bind(this);\n    this.deleteProduct = this.deleteProduct.bind(this);\n  }\n  async createProduct(req: Request, res: Response, next: NextFunction) {\n    try {\n      const hospitalId = req.admin.id;\n\n      const { name, price, description, selective } = req.body;\n      const newProduct = await this._productService.createProduct(hospitalId, {\n        name,\n        price,\n        description,\n        selective,\n      });\n      res\n        .status(201)\n        .json({ data: newProduct, message: \"상품이 생성되었습니다.\" });\n    } catch (err) {\n      next(err);\n    }\n  }\n  async getProducts(req: Request, res: Response, next: NextFunction) {\n    try {\n      const products = await this._productService.getProducts();\n      console.log(products);\n      res.status(200).json({ data: products, message: \"상품 목록입니다.\" });\n    } catch (err) {\n      next(err);\n    }\n  }\n  async getProduct(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { productId } = req.params;\n      const product = await this._productService.getProductById(productId);\n      res.status(200).json({ data: product, message: \"상품입니다.\" });\n    } catch (err) {\n      next(err);\n    }\n  }\n  async updateProduct(req: Request, res: Response, next: NextFunction) {\n    try {\n      const { productId } = req.params;\n      console.log(\"controller\", productId);\n      const { name, price, description, selective } = req.body;\n      await this._productService.updateProduct(productId, {\n        name,\n        price,\n        description,\n        selective,\n      });\n      res.status(200).json({ message: \"상품이 수정되었습니다.\" });\n    } catch (err) {\n      next(err);\n    }\n  }\n  async deleteProduct(req: Request, res: Response, next: NextFunction) {\n    try {\n      const hospitalId = req.admin.id;\n      const { productId } = req.params;\n      await this._productService.deleteProduct(hospitalId, productId);\n      res.status(200).json({ message: \"상품이 삭제되었습니다.\" });\n    } catch (err) {\n      next(err);\n    }\n  }\n}\n"]}