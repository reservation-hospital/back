{"version":3,"file":"jwt.service.js","sourceRoot":"","sources":["../../../../src/api/common/services/jwt.service.ts"],"names":[],"mappings":";;;;;;AACA,gEAA+B;AAY/B,MAAa,UAAU;IACrB,MAAM,CAAU,mBAAmB,GACjC,OAAO,CAAC,GAAG,CAAC,mBAAmB,IAAI,QAAQ,CAAC;IAC9C,MAAM,CAAU,oBAAoB,GAClC,OAAO,CAAC,GAAG,CAAC,oBAAoB,IAAI,SAAS,CAAC;IAEhD,gBAAgB;IAChB,MAAM,CAAC,iBAAiB,CAAC,KAAa;QACpC,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC;QAExC,OAAO,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAmB,CAAC;IACrD,CAAC;IAED,iBAAiB;IACjB,MAAM,CAAC,kBAAkB,CAAC,KAAa;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC;QAEzC,OAAO,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAmB,CAAC;IACrD,CAAC;IAED,gBAAgB;IAChB,MAAM,CAAC,mBAAmB,CAAC,MAAc;QACvC,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC;QAEvC,OAAO,sBAAG,CAAC,IAAI,CACb,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,IAAI,UAAU,EAAE,EAChC,IAAI,CAAC,mBAAmB,EACxB;YACE,SAAS,EAAE,SAAS,IAAI,IAAI;SAC7B,CACF,CAAC;IACJ,CAAC;IAED,iBAAiB;IACjB,MAAM,CAAC,oBAAoB,CAAC,MAA4B;QACtD,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;QACjC,OAAO,sBAAG,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,oBAAoB,EAAE;YACjD,SAAS,EAAE,SAAS,IAAI,IAAI;SAC7B,CAAC,CAAC;IACL,CAAC;;AAvCH,gCAwCC","sourcesContent":["import { RoleType } from \"@/@types/jsonwebtoken\";\nimport jwt from \"jsonwebtoken\";\n\ntype Params = {\n  /** 유저 ID */\n  id: string;\n  /** 역할 */\n  role?: RoleType;\n\n  /** 만료 시간 */\n  expiresIn?: string;\n};\n\nexport class JwtService {\n  static readonly ACCESS_TOKEN_SECRET =\n    process.env.ACCESS_TOKEN_SECRET || \"access\";\n  static readonly REFRESH_TOKEN_SECRET =\n    process.env.REFRESH_TOKEN_SECRET || \"refresh\";\n\n  /** 엑세스 토큰 검증 */\n  static verifyAccessToken(token: string) {\n    const secret = this.ACCESS_TOKEN_SECRET;\n\n    return jwt.verify(token, secret) as jwt.JwtPayload;\n  }\n\n  /** 리프레시 토큰 검증 */\n  static verifyRefreshToken(token: string) {\n    const secret = this.REFRESH_TOKEN_SECRET;\n\n    return jwt.verify(token, secret) as jwt.JwtPayload;\n  }\n\n  /** 엑세스 토큰 발행 */\n  static generateAccessToken(params: Params) {\n    const { id, expiresIn, role } = params;\n\n    return jwt.sign(\n      { id, role: role ?? \"hospital\" },\n      this.ACCESS_TOKEN_SECRET,\n      {\n        expiresIn: expiresIn || \"1h\",\n      }\n    );\n  }\n\n  /** 리프레시 토큰 발행 */\n  static generateRefreshToken(params: Omit<Params, \"role\">) {\n    const { id, expiresIn } = params;\n    return jwt.sign({ id }, this.REFRESH_TOKEN_SECRET, {\n      expiresIn: expiresIn || \"1h\",\n    });\n  }\n}\n"]}